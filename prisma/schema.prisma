// Customer Support Chatbot Platform - Database Schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// ============================================
// USER & AUTHENTICATION
// ============================================

model User {
  id                String         @id @default(cuid())
  email             String         @unique
  name              String?
  emailVerified     DateTime?
  image             String?
  password          String?
  
  // Company info
  companyName       String?
  website           String?
  
  // Settings
  language          String         @default("tr")
  timezone          String         @default("Europe/Istanbul")
  
  createdAt         DateTime       @default(now())
  updatedAt         DateTime       @updatedAt
  
  // Relations
  accounts          Account[]
  sessions          Session[]
  chatbots          Chatbot[]
  subscription      Subscription?
  teamMembers       TeamMember[]
  
  @@index([email])
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

// ============================================
// SUBSCRIPTION & BILLING
// ============================================

model Subscription {
  id                    String    @id @default(cuid())
  userId                String    @unique
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  // Stripe
  stripeCustomerId      String?   @unique
  stripeSubscriptionId  String?   @unique
  stripePriceId         String?
  
  // Plan
  plan                  String    @default("free") // free, starter, professional, enterprise
  status                String    @default("active") // active, canceled, past_due
  
  // Limits
  maxChatbots           Int       @default(1)
  maxDocuments          Int       @default(10)
  maxConversations      Int       @default(100) // per month
  conversationsUsed     Int       @default(0)
  storageLimit          Int       @default(100) // MB
  storageUsed           Int       @default(0)   // MB
  
  // Period
  currentPeriodStart    DateTime  @default(now())
  currentPeriodEnd      DateTime?
  cancelAtPeriodEnd     Boolean   @default(false)
  
  createdAt             DateTime  @default(now())
  updatedAt             DateTime  @updatedAt
  
  @@index([userId])
}

// ============================================
// CHATBOT
// ============================================

model Chatbot {
  id            String    @id @default(cuid())
  userId        String
  user          User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  // Basic Info
  name          String    // "Support Bot", "Sales Assistant"
  identifier    String    @unique // "abc123xyz" for embed code
  
  // Appearance
  primaryColor      String    @default("#3b82f6")
  secondaryColor    String    @default("#1e40af")
  botAvatar         String?
  botName           String    @default("AI Assistant")
  position          String    @default("bottom-right") // bottom-right, bottom-left
  
  // Messages
  welcomeMessage    String    @default("Hello! How can I help you today?")
  placeholderText   String    @default("Type your message...")
  fallbackMessage   String    @default("I couldn't find an answer. Would you like to speak with a human?")
  offlineMessage    String?
  
  // Behavior
  language          String    @default("en")
  aiModel           String    @default("gpt-3.5-turbo")
  temperature       Float     @default(0.7)
  responseStyle     String    @default("professional") // professional, friendly, concise
  
  // Features
  enableLiveChat    Boolean   @default(true)
  enableEmailCapture Boolean  @default(true)
  enableRating      Boolean   @default(true)
  enableSources     Boolean   @default(true) // Show document sources
  
  // Integration
  allowedDomains    String[]  @default([])
  liveChatWebhook   String?   // Webhook URL for live chat
  emailNotification String?   // Email for notifications
  
  // Status
  isActive          Boolean   @default(true)
  isPublished       Boolean   @default(false)
  
  // Analytics
  totalConversations Int      @default(0)
  totalMessages      Int      @default(0)
  avgRating          Float?
  
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt
  
  // Relations
  documents         Document[]
  conversations     Conversation[]
  analytics         ChatbotAnalytics[]
  
  @@index([userId])
  @@index([identifier])
}

// ============================================
// DOCUMENTS (Knowledge Base)
// ============================================

model Document {
  id            String    @id @default(cuid())
  chatbotId     String
  chatbot       Chatbot   @relation(fields: [chatbotId], references: [id], onDelete: Cascade)
  
  // File Info
  name          String
  type          String    // "pdf", "docx", "txt", "url", "markdown"
  url           String?   // Storage URL or web URL
  size          Int?      // bytes
  
  // Processing
  status        String    @default("processing") // processing, ready, failed
  errorMessage  String?
  
  // Content
  rawContent    String?   @db.Text
  totalChunks   Int       @default(0)
  totalTokens   Int       @default(0)
  
  // Metadata
  metadata      Json?     // {author, created_date, etc}
  
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  
  // Relations
  chunks        DocumentChunk[]
  
  @@index([chatbotId])
  @@index([status])
}

model DocumentChunk {
  id            String    @id @default(cuid())
  documentId    String
  document      Document  @relation(fields: [documentId], references: [id], onDelete: Cascade)
  
  // Content
  content       String    @db.Text
  
  // Embedding (Vector)
  embedding     Bytes?    // Store as binary for efficiency
  
  // Metadata
  chunkIndex    Int
  tokenCount    Int
  pageNumber    Int?
  
  createdAt     DateTime  @default(now())
  
  @@index([documentId])
}

// ============================================
// CONVERSATIONS (Customer Interactions)
// ============================================

model Conversation {
  id            String    @id @default(cuid())
  chatbotId     String
  chatbot       Chatbot   @relation(fields: [chatbotId], references: [id], onDelete: Cascade)
  
  // Visitor Info
  visitorId     String    // Anonymous ID (cookie/localStorage)
  visitorEmail  String?
  visitorName   String?
  visitorPhone  String?
  
  // Status
  status        String    @default("active") // active, resolved, escalated, spam
  rating        Int?      // 1-5 stars
  feedback      String?   @db.Text
  
  // Session Info
  userAgent     String?
  ipAddress     String?
  country       String?
  referrer      String?
  currentPage   String?
  
  // Timestamps
  startedAt     DateTime  @default(now())
  endedAt       DateTime?
  updatedAt     DateTime  @updatedAt
  
  // Relations
  messages      ConversationMessage[]
  
  @@index([chatbotId])
  @@index([visitorId])
  @@index([status])
  @@index([startedAt])
}

model ConversationMessage {
  id              String       @id @default(cuid())
  conversationId  String
  conversation    Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)
  
  // Message
  role            String       // "user", "assistant", "system"
  content         String       @db.Text
  
  // AI Response metadata
  aiModel         String?
  tokens          Int?
  confidence      Float?       // 0-1
  
  // Sources (if from documents)
  sources         Json?        // [{documentId, documentName, chunkIndex, relevance}]
  
  // Human takeover
  isHumanResponse Boolean      @default(false)
  humanAgentId    String?
  
  createdAt       DateTime     @default(now())
  
  @@index([conversationId])
  @@index([createdAt])
}

// ============================================
// ANALYTICS
// ============================================

model ChatbotAnalytics {
  id                  String    @id @default(cuid())
  chatbotId           String
  chatbot             Chatbot   @relation(fields: [chatbotId], references: [id], onDelete: Cascade)
  
  date                DateTime  @db.Date
  
  // Metrics
  totalConversations  Int       @default(0)
  totalMessages       Int       @default(0)
  uniqueVisitors      Int       @default(0)
  
  resolvedByAI        Int       @default(0)
  escalatedToHuman    Int       @default(0)
  
  avgConfidence       Float?
  avgRating           Float?
  avgResponseTime     Int?      // milliseconds
  avgConversationLength Int?    // messages per conversation
  
  // Top queries
  topQueries          Json?     // [{query, count}]
  
  @@unique([chatbotId, date])
  @@index([date])
}

// ============================================
// TEAM COLLABORATION
// ============================================

model TeamMember {
  id          String    @id @default(cuid())
  userId      String
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  invitedBy   String
  role        String    @default("member") // owner, admin, member, viewer
  
  joinedAt    DateTime  @default(now())
  
  @@index([userId])
}